"""
This file contains the functions used to generated the clusters embedding
A temporal GNN is used to generate the node embeddings for every snapshot
(applied statically on every snapshot with GRU to between the snapshots)

The node embeddings are then aggregated to form the clusters embeddings
"""

# Libraries
import numpy as np
import datapreparation.preprocess as pp
import pretrain.gnn_gru as gnr


def generate_clusters_embeddings_from_nodes_embeddings(all_timesteps_embeddings):
    """
    This function takes the unique nodes embedding and generate an embedding for the clusters
    The cluster embedding is generated by taking the mean of all the nodes embeddings (unique) that form
    this cluster

    :param all_nodes_embeddings: unqiue embedding per node (generated by generate_node_embedding)
    :param clusters: list of all clusters (a list of timesteps where each timestep is a list of clusters)
    :return: embedding of each cluster of all timesteps
    """
    all_clusters_embeddings = []
    timestep_index = 0
    for timestep in pp.clusters:
        graph_nodes = np.array(list(pp.timesteps_graphs[timestep_index].nodes()))
        for cluster in timestep:
            cluster_embedding = []
            for node in cluster:
                node_embedding = all_timesteps_embeddings[timestep_index][np.where(graph_nodes == node)[0][0]]
                cluster_embedding.append(node_embedding)
            all_clusters_embeddings.append(np.mean(cluster_embedding, axis=0))
        timestep_index += 1
    # save the numpy array
    np.save(pp.data_directory + "\\processed\\all_clusters_embeddings", all_clusters_embeddings)
    return all_clusters_embeddings

def generate_clusters_embeddings(hidden_size, encoded_size, embedding_size, epochs, early_stopping):
    """
    this function takes the list of graphs from the preprocessed folder and generates an embedding for every cluster
    to be used as input by the track graph autoencoder
    """

    # generate an emebdding for every node in every graph
    all_timesteps_embeddings = gnr.train(hidden_size, encoded_size, embedding_size, epochs, early_stopping)

    # generate an embedding for the clusters from the unqiue nodes emebddings
    generate_clusters_embeddings_from_nodes_embeddings(all_timesteps_embeddings)
